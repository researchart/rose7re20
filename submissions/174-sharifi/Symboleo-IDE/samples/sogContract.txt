Domain meatSaleD
Seller isA ROLE with returnAddress : STRING;
Buyer isA ROLE with warehouse : STRING;
Currency isA Enumeration(CAD, USD, EUR);
MeatQuality isA Enumeration(PRIME, AAA, AA, A);
PerishableGood isA ASSET with quantity : NUMBER , quality : MeatQuality;
Meat isA PerishableGood;
Delivered isA EVENT with item : Meat, deliveryAddress : STRING, delDueD : DATE;
Paid isA EVENT with amount : NUMBER, currency : Currency, from : ROLE, to : ROLE, payDueD : DATE;
PaidLate isA EVENT with amount : NUMBER, currency : Currency, from : ROLE, to : ROLE;
Disclosed isA EVENT with contractID : STRING;
endDomain

Contract meatSaleC (buyer : Buyer, seller : Seller, qnt : NUMBER, 
	qlt : MeatQuality, amt : NUMBER, curr : Currency, payDueDate : DATE, 
	delAdd : STRING, effDate : DATE, delDueDateDays : NUMBER, intRate : NUMBER)
Declarations 
goods : Meat with quantity := qnt, quality := qlt;
delivered : Delivered with item := goods, deliveryAddress := delAdd, 
	delDueD := effDate_plus_delDueDates;
paid : Paid with amount := amt, currency := curr, from := buyer, 
	to := seller, payDueD := payDueDate;
paidLate : PaidLate with amount := amt_plus_interest, currency := curr, 
	from := buyer, to := seller;
disclosed : Disclosed with contractID := meatSaleC;

Preconditions
isOwner(goods, seller);

Postconditions
isOwner(goods, buyer) AND NOT (isOwner(goods,seller));

Obligations
O1 : O(seller, buyer, TRUE, happensBefore(delivered, delDueDate));
O2 : O(buyer , seller , TRUE, happensBefore(paid, payDueD));
O3 : occurs(oVIOLATION(O2), NO_INTERVAL) -> 
	O(buyer, seller, TRUE, happens(paidLate, NO_POINT));

SurvivingObls
SO1 : O(seller, buyer, TRUE, NOT happens(disclosed, t) AND 
	(t within 6 MONTHS AFTER cACTIVATED(meatSaleC)));
SO2 : O(buyer, seller, TRUE, NOT happens(disclosed, t) AND 
	(t within 6 MONTHS AFTER cACTIVATED(meatSaleC)));

Powers
P1 : occurs (oVIOLATION(O2), UNNAMED_INTERVAL) -> 
	P(seller, buyer,TRUE, occurs(oSUSPENSION(O1), UNNAMED_INTERVAL));
P2 : happensWithin(paidLate, oSUSPENSION(O1)) -> 
	P(buyer, seller, TRUE, occurs(oINEFFECT(O1), UNNAMED_INTERVAL));
P3 : NOT(happensBefore(delivered, 10 DAYS AFTER delDueDate)) -> 
	P(buyer, seller, TRUE, occurs(oDISCHARGE(O2), UNNAMED_INTERVAL) 
		AND occurs(oDISCHARGE(O3), UNNAMED_INTERVAL) AND 
		occurs(cUNSECCESSFUL_TERMINATION(meatSaleC), UNNAMED_INTERVAL));

Constraints
NOT(isEqual(buyer, seller));
forAll o | self.obligation.instance (CannotBeAssigned); 
forAll p | self.power.instance (CannotBeAssigned);
endContract
